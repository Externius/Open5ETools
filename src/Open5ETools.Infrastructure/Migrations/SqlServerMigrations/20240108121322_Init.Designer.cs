// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Open5ETools.Infrastructure.Data;

#nullable disable

namespace Open5ETools.Infrastructure.Migrations.SqlServerMigrations
{
    [DbContext(typeof(SqlServerContext))]
    [Migration("20240108121322_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Open5ETools.Core.Domain.DM.Dungeon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DungeonOptionId")
                        .HasColumnType("int");

                    b.Property<string>("DungeonTiles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("RoamingMonsterDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TrapDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DungeonOptionId");

                    b.ToTable("Dungeons");
                });

            modelBuilder.Entity("Open5ETools.Core.Domain.DM.DungeonOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Corridor")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DeadEnd")
                        .HasColumnType("bit");

                    b.Property<int>("DungeonDifficulty")
                        .HasColumnType("int");

                    b.Property<string>("DungeonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DungeonSize")
                        .HasColumnType("int");

                    b.Property<int>("ItemsRarity")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonsterType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyLevel")
                        .HasColumnType("int");

                    b.Property<int>("PartySize")
                        .HasColumnType("int");

                    b.Property<int>("RoamingPercent")
                        .HasColumnType("int");

                    b.Property<int>("RoomDensity")
                        .HasColumnType("int");

                    b.Property<int>("RoomSize")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TrapPercent")
                        .HasColumnType("int");

                    b.Property<double>("TreasureValue")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("DungeonName", "UserId")
                        .IsUnique();

                    b.ToTable("DungeonOptions");
                });

            modelBuilder.Entity("Open5ETools.Core.Domain.DM.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Key", "Name")
                        .IsUnique();

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Open5ETools.Core.Domain.DM.Treasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Treasures");
                });

            modelBuilder.Entity("Open5ETools.Core.Domain.EG.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("Open5ETools.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Open5ETools.Core.Domain.DM.Dungeon", b =>
                {
                    b.HasOne("Open5ETools.Core.Domain.DM.DungeonOption", "DungeonOption")
                        .WithMany("Dungeons")
                        .HasForeignKey("DungeonOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DungeonOption");
                });

            modelBuilder.Entity("Open5ETools.Core.Domain.DM.DungeonOption", b =>
                {
                    b.HasOne("Open5ETools.Core.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Open5ETools.Core.Domain.DM.Treasure", b =>
                {
                    b.OwnsOne("Open5ETools.Core.Common.Models.DM.Generator.TreasureDescription", "TreasureDescription", b1 =>
                        {
                            b1.Property<int>("TreasureId")
                                .HasColumnType("int");

                            b1.Property<int>("Cost")
                                .HasColumnType("int");

                            b1.Property<bool>("Magical")
                                .HasColumnType("bit");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Rarity")
                                .HasColumnType("int");

                            b1.Property<string>("Types")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TreasureId");

                            b1.ToTable("Treasures");

                            b1.ToJson("TreasureDescription");

                            b1.WithOwner()
                                .HasForeignKey("TreasureId");
                        });

                    b.Navigation("TreasureDescription")
                        .IsRequired();
                });

            modelBuilder.Entity("Open5ETools.Core.Domain.EG.Monster", b =>
                {
                    b.OwnsOne("Open5ETools.Core.Common.Models.Json.Monster", "JsonMonster", b1 =>
                        {
                            b1.Property<int>("MonsterId")
                                .HasColumnType("int");

                            b1.Property<int?>("Acrobatics")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "acrobatics");

                            b1.Property<string>("Alignment")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "alignment");

                            b1.Property<int?>("Arcana")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "arcana");

                            b1.Property<int?>("ArmorClass")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "armor_class");

                            b1.Property<int?>("Athletics")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "athletics");

                            b1.Property<string>("ChallengeRating")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "challenge_rating");

                            b1.Property<int?>("Charisma")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "charisma");

                            b1.Property<int?>("CharismaSave")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "charisma_save");

                            b1.Property<string>("ConditionImmunities")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "condition_immunities");

                            b1.Property<int?>("Constitution")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "constitution");

                            b1.Property<int?>("ConstitutionSave")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "constitution_save");

                            b1.Property<string>("DamageImmunities")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "damage_immunities");

                            b1.Property<string>("DamageResistances")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "damage_resistances");

                            b1.Property<string>("DamageVulnerabilities")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "damage_vulnerabilities");

                            b1.Property<int?>("Deception")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "deception");

                            b1.Property<int?>("Dexterity")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "dexterity");

                            b1.Property<int?>("DexteritySave")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "dexterity_save");

                            b1.Property<int?>("History")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "history");

                            b1.Property<string>("HitDice")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "hit_dice");

                            b1.Property<int?>("HitPoints")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "hit_points");

                            b1.Property<int?>("Insight")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "insight");

                            b1.Property<int?>("Intelligence")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "intelligence");

                            b1.Property<int?>("IntelligenceSave")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "intelligence_save");

                            b1.Property<int?>("Intimidation")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "intimidation");

                            b1.Property<int?>("Investigation")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "investigation");

                            b1.Property<string>("Languages")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "languages");

                            b1.Property<int?>("Medicine")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "medicine");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "name");

                            b1.Property<int?>("Nature")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "nature");

                            b1.Property<int?>("Perception")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "perception");

                            b1.Property<int?>("Performance")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "performance");

                            b1.Property<int?>("Persuasion")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "persuasion");

                            b1.Property<int?>("Religion")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "religion");

                            b1.Property<string>("Senses")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "senses");

                            b1.Property<string>("Size")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "size");

                            b1.Property<string>("Speed")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "speed");

                            b1.Property<int?>("Stealth")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "stealth");

                            b1.Property<int?>("Strength")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "strength");

                            b1.Property<int?>("StrengthSave")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "strength_save");

                            b1.Property<string>("Subtype")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "subtype");

                            b1.Property<int?>("Survival")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "survival");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "type");

                            b1.Property<int?>("Wisdom")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "wisdom");

                            b1.Property<int?>("WisdomSave")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "wisdom_save");

                            b1.HasKey("MonsterId");

                            b1.ToTable("Monsters");

                            b1.ToJson("JsonMonster");

                            b1.WithOwner()
                                .HasForeignKey("MonsterId");

                            b1.OwnsMany("Open5ETools.Core.Common.Models.Json.Action", "Actions", b2 =>
                                {
                                    b2.Property<int>("MonsterId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<int?>("AttackBonus")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "attack_bonus");

                                    b2.Property<int?>("DamageBonus")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "damage_bonus");

                                    b2.Property<string>("DamageDice")
                                        .HasColumnType("nvarchar(max)")
                                        .HasAnnotation("Relational:JsonPropertyName", "damage_dice");

                                    b2.Property<string>("Desc")
                                        .HasColumnType("nvarchar(max)")
                                        .HasAnnotation("Relational:JsonPropertyName", "desc");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)")
                                        .HasAnnotation("Relational:JsonPropertyName", "name");

                                    b2.HasKey("MonsterId", "Id");

                                    b2.ToTable("Monsters");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "actions");

                                    b2.WithOwner()
                                        .HasForeignKey("MonsterId");
                                });

                            b1.OwnsMany("Open5ETools.Core.Common.Models.Json.LegendaryAction", "LegendaryActions", b2 =>
                                {
                                    b2.Property<int>("MonsterId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<int?>("AttackBonus")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "attack_bonus");

                                    b2.Property<string>("DamageDice")
                                        .HasColumnType("nvarchar(max)")
                                        .HasAnnotation("Relational:JsonPropertyName", "damage_dice");

                                    b2.Property<string>("Desc")
                                        .HasColumnType("nvarchar(max)")
                                        .HasAnnotation("Relational:JsonPropertyName", "desc");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)")
                                        .HasAnnotation("Relational:JsonPropertyName", "name");

                                    b2.HasKey("MonsterId", "Id");

                                    b2.ToTable("Monsters");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "legendary_actions");

                                    b2.WithOwner()
                                        .HasForeignKey("MonsterId");
                                });

                            b1.OwnsMany("Open5ETools.Core.Common.Models.Json.Reaction", "Reactions", b2 =>
                                {
                                    b2.Property<int>("MonsterId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<int?>("AttackBonus")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "attack_bonus");

                                    b2.Property<string>("Desc")
                                        .HasColumnType("nvarchar(max)")
                                        .HasAnnotation("Relational:JsonPropertyName", "desc");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)")
                                        .HasAnnotation("Relational:JsonPropertyName", "name");

                                    b2.HasKey("MonsterId", "Id");

                                    b2.ToTable("Monsters");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "reactions");

                                    b2.WithOwner()
                                        .HasForeignKey("MonsterId");
                                });

                            b1.OwnsMany("Open5ETools.Core.Common.Models.Json.SpecialAbility", "SpecialAbilities", b2 =>
                                {
                                    b2.Property<int>("MonsterId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<int?>("AttackBonus")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "attack_bonus");

                                    b2.Property<string>("DamageDice")
                                        .HasColumnType("nvarchar(max)")
                                        .HasAnnotation("Relational:JsonPropertyName", "damage_dice");

                                    b2.Property<string>("Desc")
                                        .HasColumnType("nvarchar(max)")
                                        .HasAnnotation("Relational:JsonPropertyName", "desc");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)")
                                        .HasAnnotation("Relational:JsonPropertyName", "name");

                                    b2.HasKey("MonsterId", "Id");

                                    b2.ToTable("Monsters");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "special_abilities");

                                    b2.WithOwner()
                                        .HasForeignKey("MonsterId");
                                });

                            b1.Navigation("Actions");

                            b1.Navigation("LegendaryActions");

                            b1.Navigation("Reactions");

                            b1.Navigation("SpecialAbilities");
                        });

                    b.Navigation("JsonMonster")
                        .IsRequired();
                });

            modelBuilder.Entity("Open5ETools.Core.Domain.DM.DungeonOption", b =>
                {
                    b.Navigation("Dungeons");
                });
#pragma warning restore 612, 618
        }
    }
}
